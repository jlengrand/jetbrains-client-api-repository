{
  "schemes": ["https"],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "# Introduction\n\nFly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).\n\nThe Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](https://fly.io/docs/networking/custom-domains-with-fly/#graphql-api-notes).\n\n## Authentication\n\nAll requests must include the Fly API Token in the HTTP Headers as follows:\n\n```\nAuthorization: Bearer [TOKEN]\n```\n\nYou can get your API token using [flyctl](https://fly.io/docs/hands-on/install-flyctl/) by running `fly auth token`\n\n## Base URL\n\nThe easiest (and recommended) way to connect to the Machines API is to use the public `api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.\n\nFollow the [instructions](https://fly.io/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](https://fly.io/docs/networking/private-networking/). Once you’re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`\n\n## Response Codes\n\nThe API uses conventional HTTP status codes to signal whether a request was successful or not.\n\nTypically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.\n\n| Status | Description                                 |\n| :----: | ------------------------------------------- |\n| `200`  | Successful request.                         |\n| `201`  | Created successfully.                       |\n| `202`  | Successful request. No content.             |\n| `400`  | Check that the parameters were correct.     |\n| `401`  | The API key used was missing or invalid.    |\n| `404`  | The resource was not found.                 |\n| `5xx`  | Indicates an error with Fly.io API servers. |\n",
    "title": "Machines API",
    "contact": {},
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0"
  },
  "host": "api.machines.dev",
  "basePath": "/v1",
  "paths": {
    "/apps": {
      "get": {
        "description": "List all apps with the ability to filter by organization slug.\n",
        "tags": [
          "Apps"
        ],
        "summary": "List Apps",
        "operationId": "Apps_list",
        "parameters": [
          {
            "type": "string",
            "description": "The org slug, or 'personal', to filter apps",
            "name": "org_slug",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAppsResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create an app with the specified details in the request body.\n",
        "tags": [
          "Apps"
        ],
        "summary": "Create App",
        "operationId": "Apps_create",
        "parameters": [
          {
            "description": "App body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAppRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/apps/{app_name}": {
      "get": {
        "description": "Retrieve details about a specific app by its name.\n",
        "tags": [
          "Apps"
        ],
        "summary": "Get App",
        "operationId": "Apps_show",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an app by its name.\n",
        "tags": [
          "Apps"
        ],
        "summary": "Destroy App",
        "operationId": "Apps_delete",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/apps/{app_name}/machines": {
      "get": {
        "description": "List all Machines associated with a specific app, with optional filters for including deleted Machines and filtering by region.\n",
        "tags": [
          "Machines"
        ],
        "summary": "List Machines",
        "operationId": "Machines_list",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Include deleted machines",
            "name": "include_deleted",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Region filter",
            "name": "region",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Machine"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a Machine within a specific app using the details provided in the request body.\n\n**Important**: This request can fail, and you’re responsible for handling that failure. If you ask for a large Machine, or a Machine in a region we happen to be at capacity for, you might need to retry the request, or to fall back to another region. If you’re working directly with the Machines API, you’re taking some responsibility for your own orchestration!\n",
        "tags": [
          "Machines"
        ],
        "summary": "Create Machine",
        "operationId": "Machines_create",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "description": "Create machine request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMachineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Machine"
            }
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}": {
      "get": {
        "description": "Get details of a specific Machine within an app by the Machine ID.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Get Machine",
        "operationId": "Machines_show",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Machine"
            }
          }
        }
      },
      "post": {
        "description": "Update a Machine's configuration using the details provided in the request body.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Update Machine",
        "operationId": "Machines_update",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMachineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Machine"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a specific Machine within an app by Machine ID, with an optional force parameter to force kill the Machine if it's running.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Destroy Machine",
        "operationId": "Machines_delete",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Force kill the machine if it's running",
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/cordon": {
      "post": {
        "description": "“Cordoning” a Machine refers to disabling its services, so the Fly Proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of Machines is started up with services disabled, and when they are all healthy, the services are enabled on the new Machines and disabled on the old ones.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Cordon Machine",
        "operationId": "Machines_cordon",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/events": {
      "get": {
        "description": "List all events associated with a specific Machine within an app.\n",
        "tags": [
          "Machines"
        ],
        "summary": "List Events",
        "operationId": "Machines_list_events",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MachineEvent"
              }
            }
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/exec": {
      "post": {
        "description": "Execute a command on a specific Machine and return the raw command output bytes.\n",
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "tags": [
          "Machines"
        ],
        "summary": "Execute Command",
        "operationId": "Machines_exec",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MachineExecRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Raw command output bytes are written back",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/lease": {
      "get": {
        "description": "Retrieve the current lease of a specific Machine within an app. Machine leases can be used to obtain an exclusive lock on modifying a Machine.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Get Lease",
        "operationId": "Machines_show_lease",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Lease"
            }
          }
        }
      },
      "post": {
        "description": "Create a lease for a specific Machine within an app using the details provided in the request body. Machine leases can be used to obtain an exclusive lock on modifying a Machine.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Create Lease",
        "operationId": "Machines_create_lease",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLeaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Lease"
            }
          }
        }
      },
      "delete": {
        "description": "Release the lease of a specific Machine within an app. Machine leases can be used to obtain an exclusive lock on modifying a Machine.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Release Lease",
        "operationId": "Machines_release_lease",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/metadata": {
      "get": {
        "description": "Retrieve metadata for a specific Machine within an app.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Get Metadata",
        "operationId": "Machines_show_metadata",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/metadata/{key}": {
      "post": {
        "description": "Update metadata for a specific machine within an app by providing a metadata key.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Update Metadata",
        "operationId": "Machines_update_metadata",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Metadata Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete metadata for a specific Machine within an app by providing a metadata key.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Delete Metadata",
        "operationId": "Machines_delete_metadata",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Metadata Key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/ps": {
      "get": {
        "description": "List all processes running on a specific Machine within an app, with optional sorting parameters.\n",
        "tags": [
          "Machines"
        ],
        "summary": "List Processes",
        "operationId": "Machines_list_processes",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Sort by",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Order",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProcessStat"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/restart": {
      "post": {
        "description": "Restart a specific Machine within an app, with an optional timeout parameter.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Restart Machine",
        "operationId": "Machines_restart",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Restart timeout as a Go duration string or number of seconds",
            "name": "timeout",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/signal": {
      "post": {
        "description": "Send a signal to a specific Machine within an app using the details provided in the request body.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Signal Machine",
        "operationId": "Machines_signal",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/start": {
      "post": {
        "description": "Start a specific Machine within an app.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Start Machine",
        "operationId": "Machines_start",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/stop": {
      "post": {
        "description": "Stop a specific Machine within an app, with an optional request body to specify signal and timeout.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Stop Machine",
        "operationId": "Machines_stop",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Optional request body",
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StopRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/uncordon": {
      "post": {
        "description": "“Cordoning” a Machine refers to disabling its services, so the Fly Proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of Machines is started up with services disabled, and when they are all healthy, the services are enabled on the new Machines and disabled on the old ones.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Uncordon Machine",
        "operationId": "Machines_uncordon",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/versions": {
      "get": {
        "description": "List all versions of the configuration for a specific Machine within an app.\n",
        "tags": [
          "Machines"
        ],
        "summary": "List Versions",
        "operationId": "Machines_list_versions",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MachineVersion"
              }
            }
          }
        }
      }
    },
    "/apps/{app_name}/machines/{machine_id}/wait": {
      "get": {
        "description": "Wait for a Machine to reach a specific state. Specify the desired state with the state parameter. See the [Machine states table](https://fly.io/docs/machines/working-with-machines/#machine-states) for a list of possible states. The default for this parameter is `started`.\n\nThis request will block for up to 60 seconds. Set a shorter timeout with the timeout parameter.\n",
        "tags": [
          "Machines"
        ],
        "summary": "Wait for State",
        "operationId": "Machines_wait",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Machine ID",
            "name": "machine_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "instance? version? TODO",
            "name": "instance_id",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "wait timeout. default 60s",
            "name": "timeout",
            "in": "query"
          },
          {
            "enum": [
              "started",
              "stopped",
              "destroyed"
            ],
            "type": "string",
            "description": "desired state",
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/apps/{app_name}/volumes": {
      "get": {
        "description": "List all volumes associated with a specific app.\n",
        "tags": [
          "Volumes"
        ],
        "summary": "List Volumes",
        "operationId": "Volumes_list",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Volume"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a volume for a specific app using the details provided in the request body.\n",
        "tags": [
          "Volumes"
        ],
        "summary": "Create Volume",
        "operationId": "Volumes_create",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateVolumeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        }
      }
    },
    "/apps/{app_name}/volumes/{volume_id}": {
      "get": {
        "description": "Retrieve details about a specific volume by its ID within an app.\n",
        "tags": [
          "Volumes"
        ],
        "summary": "Get Volume",
        "operationId": "Volumes_get_by_id",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Volume ID",
            "name": "volume_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        }
      },
      "post": {
        "description": "Update a volume's configuration using the details provided in the request body.\n",
        "tags": [
          "Volumes"
        ],
        "summary": "Update Volume",
        "operationId": "Volumes_update",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Volume ID",
            "name": "volume_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVolumeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a specific volume within an app by volume ID.\n",
        "tags": [
          "Volumes"
        ],
        "summary": "Destroy Volume",
        "operationId": "Volume_delete",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Volume ID",
            "name": "volume_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        }
      }
    },
    "/apps/{app_name}/volumes/{volume_id}/extend": {
      "put": {
        "description": "Extend a volume's size within an app using the details provided in the request body.\n",
        "tags": [
          "Volumes"
        ],
        "summary": "Extend Volume",
        "operationId": "Volumes_extend",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Volume ID",
            "name": "volume_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendVolumeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtendVolumeResponse"
            }
          }
        }
      }
    },
    "/apps/{app_name}/volumes/{volume_id}/snapshots": {
      "get": {
        "description": "List all snapshots for a specific volume within an app.\n",
        "tags": [
          "Volumes"
        ],
        "summary": "List Snapshots",
        "operationId": "Volumes_list_snapshots",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Volume ID",
            "name": "volume_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VolumeSnapshot"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a snapshot for a specific volume within an app.\n",
        "tags": [
          "Volumes"
        ],
        "summary": "Create Snapshot",
        "operationId": "createVolumeSnapshot",
        "parameters": [
          {
            "type": "string",
            "description": "Fly App Name",
            "name": "app_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Volume ID",
            "name": "volume_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "definitions": {
    "App": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization": {
          "$ref": "#/definitions/Organization"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "CheckStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "output": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "CreateAppRequest": {
      "type": "object",
      "properties": {
        "app_name": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "org_slug": {
          "type": "string"
        }
      }
    },
    "CreateLeaseRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "ttl": {
          "type": "integer"
        }
      }
    },
    "CreateMachineRequest": {
      "type": "object",
      "properties": {
        "config": {
          "description": "An object defining the Machine configuration",
          "allOf": [
            {
              "$ref": "#/definitions/fly.MachineConfig"
            }
          ]
        },
        "lease_ttl": {
          "type": "integer"
        },
        "lsvd": {
          "type": "boolean"
        },
        "name": {
          "description": "Unique name for this Machine. If omitted, one is generated for you",
          "type": "string"
        },
        "region": {
          "description": "The target region. Omitting this param launches in the same region as your WireGuard peer connection (somewhere near you).",
          "type": "string"
        },
        "skip_launch": {
          "type": "boolean"
        },
        "skip_service_registration": {
          "type": "boolean"
        }
      }
    },
    "CreateVolumeRequest": {
      "type": "object",
      "properties": {
        "compute": {
          "$ref": "#/definitions/fly.MachineGuest"
        },
        "encrypted": {
          "type": "boolean"
        },
        "fstype": {
          "type": "string"
        },
        "machines_only": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "require_unique_zone": {
          "type": "boolean"
        },
        "size_gb": {
          "type": "integer"
        },
        "snapshot_id": {
          "description": "restore from snapshot",
          "type": "string"
        },
        "snapshot_retention": {
          "type": "integer"
        },
        "source_volume_id": {
          "description": "fork from remote volume",
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "details": {
          "description": "Deprecated"
        },
        "error": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/main.statusCode"
        }
      }
    },
    "ExtendVolumeRequest": {
      "type": "object",
      "properties": {
        "size_gb": {
          "type": "integer"
        }
      }
    },
    "ExtendVolumeResponse": {
      "type": "object",
      "properties": {
        "needs_restart": {
          "type": "boolean"
        },
        "volume": {
          "$ref": "#/definitions/Volume"
        }
      }
    },
    "ImageRef": {
      "type": "object",
      "properties": {
        "digest": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "registry": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "Lease": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Description or reason for the Lease.",
          "type": "string"
        },
        "expires_at": {
          "description": "ExpiresAt is the unix timestamp in UTC to denote when the Lease will no longer be valid.",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce is the unique ID autogenerated and associated with the Lease.",
          "type": "string"
        },
        "owner": {
          "description": "Owner is the user identifier which acquired the Lease.",
          "type": "string"
        },
        "version": {
          "description": "Machine version",
          "type": "string"
        }
      }
    },
    "ListApp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "machine_count": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "network": {}
      }
    },
    "ListAppsResponse": {
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListApp"
          }
        },
        "total_apps": {
          "type": "integer"
        }
      }
    },
    "ListenSocket": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "proto": {
          "type": "string"
        }
      }
    },
    "Machine": {
      "type": "object",
      "properties": {
        "checks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckStatus"
          }
        },
        "config": {
          "$ref": "#/definitions/fly.MachineConfig"
        },
        "created_at": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineEvent"
          }
        },
        "id": {
          "type": "string"
        },
        "image_ref": {
          "$ref": "#/definitions/ImageRef"
        },
        "instance_id": {
          "description": "InstanceID is unique for each version of the machine",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nonce": {
          "description": "Nonce is only every returned on machine creation if a lease_duration was provided.",
          "type": "string"
        },
        "private_ip": {
          "description": "PrivateIP is the internal 6PN address of the machine.",
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "MachineEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "request": {},
        "source": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "MachineExecRequest": {
      "type": "object",
      "properties": {
        "cmd": {
          "description": "Deprecated: use Command instead",
          "type": "string"
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "integer"
        }
      }
    },
    "MachineVersion": {
      "type": "object",
      "properties": {
        "user_config": {
          "$ref": "#/definitions/fly.MachineConfig"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        }
      }
    },
    "ProcessStat": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string"
        },
        "cpu": {
          "type": "integer"
        },
        "directory": {
          "type": "string"
        },
        "listen_sockets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListenSocket"
          }
        },
        "pid": {
          "type": "integer"
        },
        "rss": {
          "type": "integer"
        },
        "rtime": {
          "type": "integer"
        },
        "stime": {
          "type": "integer"
        }
      }
    },
    "SignalRequest": {
      "type": "object",
      "properties": {
        "signal": {
          "type": "string",
          "enum": [
            "SIGABRT",
            "SIGALRM",
            "SIGFPE",
            "SIGHUP",
            "SIGILL",
            "SIGINT",
            "SIGKILL",
            "SIGPIPE",
            "SIGQUIT",
            "SIGSEGV",
            "SIGTERM",
            "SIGTRAP",
            "SIGUSR1"
          ]
        }
      }
    },
    "StopRequest": {
      "type": "object",
      "properties": {
        "signal": {
          "type": "string"
        },
        "timeout": {
          "$ref": "#/definitions/fly.Duration"
        }
      }
    },
    "UpdateMachineRequest": {
      "type": "object",
      "properties": {
        "config": {
          "description": "An object defining the Machine configuration",
          "allOf": [
            {
              "$ref": "#/definitions/fly.MachineConfig"
            }
          ]
        },
        "current_version": {
          "type": "string"
        },
        "lease_ttl": {
          "type": "integer"
        },
        "lsvd": {
          "type": "boolean"
        },
        "name": {
          "description": "Unique name for this Machine. If omitted, one is generated for you",
          "type": "string"
        },
        "region": {
          "description": "The target region. Omitting this param launches in the same region as your WireGuard peer connection (somewhere near you).",
          "type": "string"
        },
        "skip_launch": {
          "type": "boolean"
        },
        "skip_service_registration": {
          "type": "boolean"
        }
      }
    },
    "UpdateVolumeRequest": {
      "type": "object",
      "properties": {
        "auto_backup_enabled": {
          "type": "boolean"
        },
        "snapshot_retention": {
          "type": "integer"
        }
      }
    },
    "Volume": {
      "type": "object",
      "properties": {
        "attached_alloc_id": {
          "type": "string"
        },
        "attached_machine_id": {
          "type": "string"
        },
        "auto_backup_enabled": {
          "type": "boolean"
        },
        "block_size": {
          "type": "integer"
        },
        "blocks": {
          "type": "integer"
        },
        "blocks_avail": {
          "type": "integer"
        },
        "blocks_free": {
          "type": "integer"
        },
        "created_at": {
          "type": "string"
        },
        "encrypted": {
          "type": "boolean"
        },
        "fstype": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "size_gb": {
          "type": "integer"
        },
        "snapshot_retention": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        }
      }
    },
    "VolumeSnapshot": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "digest": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "fly.DNSConfig": {
      "type": "object",
      "properties": {
        "nameservers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fly.dnsOption"
          }
        },
        "searches": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "skip_registration": {
          "type": "boolean"
        }
      }
    },
    "fly.Duration": {
      "type": "object",
      "properties": {
        "time.Duration": {
          "type": "integer",
          "enum": [
            -9223372036854775808,
            9223372036854775807,
            1,
            1000,
            1000000,
            1000000000,
            60000000000,
            3600000000000,
            1,
            1000,
            1000000,
            1000000000,
            60000000000,
            3600000000000
          ],
          "x-enum-varnames": [
            "minDuration",
            "maxDuration",
            "Nanosecond",
            "Microsecond",
            "Millisecond",
            "Second",
            "Minute",
            "Hour",
            "Nanosecond",
            "Microsecond",
            "Millisecond",
            "Second",
            "Minute",
            "Hour"
          ]
        }
      }
    },
    "fly.File": {
      "description": "A file that will be written to the Machine. One of RawValue or SecretName must be set.",
      "type": "object",
      "properties": {
        "guest_path": {
          "description": "GuestPath is the path on the machine where the file will be written and must be an absolute path.\nFor example: /full/path/to/file.json",
          "type": "string"
        },
        "raw_value": {
          "description": "The base64 encoded string of the file contents.",
          "type": "string"
        },
        "secret_name": {
          "description": "The name of the secret that contains the base64 encoded file contents.",
          "type": "string"
        }
      }
    },
    "fly.HTTPOptions": {
      "type": "object",
      "properties": {
        "compress": {
          "type": "boolean"
        },
        "h2_backend": {
          "type": "boolean"
        },
        "response": {
          "$ref": "#/definitions/fly.HTTPResponseOptions"
        }
      }
    },
    "fly.HTTPResponseOptions": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "fly.MachineCheck": {
      "description": "An optional object that defines one or more named checks. The key for each check is the check name.",
      "type": "object",
      "properties": {
        "grace_period": {
          "description": "The time to wait after a VM starts before checking its health",
          "allOf": [
            {
              "$ref": "#/definitions/fly.Duration"
            }
          ]
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fly.MachineHTTPHeader"
          }
        },
        "interval": {
          "description": "The time between connectivity checks",
          "allOf": [
            {
              "$ref": "#/definitions/fly.Duration"
            }
          ]
        },
        "method": {
          "description": "For http checks, the HTTP method to use to when making the request",
          "type": "string"
        },
        "path": {
          "description": "For http checks, the path to send the request to",
          "type": "string"
        },
        "port": {
          "description": "The port to connect to, often the same as internal_port",
          "type": "integer"
        },
        "protocol": {
          "description": "For http checks, whether to use http or https",
          "type": "string"
        },
        "timeout": {
          "description": "The maximum time a connection can take before being reported as failing its health check",
          "allOf": [
            {
              "$ref": "#/definitions/fly.Duration"
            }
          ]
        },
        "tls_server_name": {
          "description": "If the protocol is https, the hostname to use for TLS certificate validation",
          "type": "string"
        },
        "tls_skip_verify": {
          "description": "For http checks with https protocol, whether or not to verify the TLS certificate",
          "type": "boolean"
        },
        "type": {
          "description": "tcp or http",
          "type": "string"
        }
      }
    },
    "fly.MachineConfig": {
      "type": "object",
      "properties": {
        "auto_destroy": {
          "description": "Optional boolean telling the Machine to destroy itself once it’s complete (default false)",
          "type": "boolean"
        },
        "checks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/fly.MachineCheck"
          }
        },
        "disable_machine_autostart": {
          "description": "Deprecated: use Service.Autostart instead",
          "type": "boolean"
        },
        "dns": {
          "$ref": "#/definitions/fly.DNSConfig"
        },
        "env": {
          "description": "An object filled with key/value pairs to be set as environment variables",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fly.File"
          }
        },
        "guest": {
          "$ref": "#/definitions/fly.MachineGuest"
        },
        "image": {
          "description": "The docker image to run",
          "type": "string"
        },
        "init": {
          "$ref": "#/definitions/fly.MachineInit"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metrics": {
          "$ref": "#/definitions/fly.MachineMetrics"
        },
        "mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fly.MachineMount"
          }
        },
        "processes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fly.MachineProcess"
          }
        },
        "restart": {
          "$ref": "#/definitions/fly.MachineRestart"
        },
        "schedule": {
          "type": "string"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fly.MachineService"
          }
        },
        "size": {
          "description": "Deprecated: use Guest instead",
          "type": "string"
        },
        "standbys": {
          "description": "Standbys enable a machine to be a standby for another. In the event of a hardware failure,\nthe standby machine will be started.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fly.Static"
          }
        },
        "stop_config": {
          "$ref": "#/definitions/fly.StopConfig"
        }
      }
    },
    "fly.MachineGuest": {
      "type": "object",
      "properties": {
        "cpu_kind": {
          "type": "string"
        },
        "cpus": {
          "type": "integer"
        },
        "gpu_kind": {
          "type": "string"
        },
        "gpus": {
          "type": "integer"
        },
        "host_dedication_id": {
          "type": "string"
        },
        "kernel_args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "memory_mb": {
          "type": "integer"
        }
      }
    },
    "fly.MachineHTTPHeader": {
      "description": "For http checks, an array of objects with string field Name and array of strings field Values. The key/value pairs specify header and header values that will get passed with the check call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The header name",
          "type": "string"
        },
        "values": {
          "description": "The header value",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "fly.MachineInit": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "exec": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kernel_args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "swap_size_mb": {
          "type": "integer"
        },
        "tty": {
          "type": "boolean"
        }
      }
    },
    "fly.MachineMetrics": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        }
      }
    },
    "fly.MachineMount": {
      "type": "object",
      "properties": {
        "add_size_gb": {
          "type": "integer"
        },
        "encrypted": {
          "type": "boolean"
        },
        "extend_threshold_percent": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "size_gb": {
          "type": "integer"
        },
        "size_gb_limit": {
          "type": "integer"
        },
        "volume": {
          "type": "string"
        }
      }
    },
    "fly.MachinePort": {
      "type": "object",
      "properties": {
        "end_port": {
          "type": "integer"
        },
        "force_https": {
          "type": "boolean"
        },
        "handlers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "http_options": {
          "$ref": "#/definitions/fly.HTTPOptions"
        },
        "port": {
          "type": "integer"
        },
        "proxy_proto_options": {
          "$ref": "#/definitions/fly.ProxyProtoOptions"
        },
        "start_port": {
          "type": "integer"
        },
        "tls_options": {
          "$ref": "#/definitions/fly.TLSOptions"
        }
      }
    },
    "fly.MachineProcess": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "exec": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ignore_app_secrets": {
          "description": "IgnoreAppSecrets can be set to true to ignore the secrets for the App the Machine belongs to\nand only use the secrets provided at the process level. The default/legacy behavior is to use\nthe secrets provided at the App level.",
          "type": "boolean"
        },
        "secrets": {
          "description": "Secrets can be provided at the process level to explicitly indicate which secrets should be\nused for the process. If not provided, the secrets provided at the machine level will be used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/fly.MachineSecret"
          }
        },
        "user": {
          "type": "string"
        }
      }
    },
    "fly.MachineRestart": {
      "description": "The Machine restart policy defines whether and how flyd restarts a Machine after its main process exits. See https://fly.io/docs/machines/guides-examples/machine-restart-policy/.",
      "type": "object",
      "properties": {
        "max_retries": {
          "description": "When policy is on-failure, the maximum number of times to attempt to restart the Machine before letting it stop.",
          "type": "integer"
        },
        "policy": {
          "description": "* no - Never try to restart a Machine automatically when its main process exits, whether that’s on purpose or on a crash.\n* always - Always restart a Machine automatically and never let it enter a stopped state, even when the main process exits cleanly.\n* on-failure - Try up to MaxRetries times to automatically restart the Machine if it exits with a non-zero exit code. Default when no explicit policy is set, and for Machines with schedules.",
          "type": "string",
          "enum": [
            "no",
            "always",
            "on-failure"
          ]
        }
      }
    },
    "fly.MachineSecret": {
      "description": "A Secret needing to be set in the environment of the Machine. env_var is required",
      "type": "object",
      "properties": {
        "env_var": {
          "description": "EnvVar is required and is the name of the environment variable that will be set from the\nsecret. It must be a valid environment variable name.",
          "type": "string"
        },
        "name": {
          "description": "Name is optional and when provided is used to reference a secret name where the EnvVar is\ndifferent from what was set as the secret name.",
          "type": "string"
        }
      }
    },
    "fly.MachineService": {
      "type": "object",
      "properties": {
        "autostart": {
          "type": "boolean"
        },
        "autostop": {
          "type": "boolean"
        },
        "checks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fly.MachineCheck"
          }
        },
        "concurrency": {
          "$ref": "#/definitions/fly.MachineServiceConcurrency"
        },
        "force_instance_description": {
          "type": "string"
        },
        "force_instance_key": {
          "type": "string"
        },
        "internal_port": {
          "type": "integer"
        },
        "min_machines_running": {
          "type": "integer"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fly.MachinePort"
          }
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "fly.MachineServiceConcurrency": {
      "type": "object",
      "properties": {
        "hard_limit": {
          "type": "integer"
        },
        "soft_limit": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "fly.ProxyProtoOptions": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "fly.Static": {
      "type": "object",
      "required": [
        "guest_path",
        "url_prefix"
      ],
      "properties": {
        "guest_path": {
          "type": "string"
        },
        "tigris_bucket": {
          "type": "string"
        },
        "url_prefix": {
          "type": "string"
        }
      }
    },
    "fly.StopConfig": {
      "type": "object",
      "properties": {
        "signal": {
          "type": "string"
        },
        "timeout": {
          "$ref": "#/definitions/fly.Duration"
        }
      }
    },
    "fly.TLSOptions": {
      "type": "object",
      "properties": {
        "alpn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "default_self_signed": {
          "type": "boolean"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "fly.dnsOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "main.statusCode": {
      "type": "string",
      "enum": [
        "unknown",
        "insufficient_capacity"
      ],
      "x-enum-varnames": [
        "unknown",
        "capacityErr"
      ]
    }
  },
  "tags": [
    {
      "description": "A Fly App is an abstraction for a group of Machines running your code on Fly.io, along with the configuration, provisioned resources, and data we need to keep track of to run and route to your Machines. Read more [here](https://fly.io/docs/reference/apps/).",
      "name": "Apps"
    },
    {
      "description": "Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](https://fly.io/docs/machines/).",
      "name": "Machines"
    },
    {
      "description": "Fly Volumes are local persistent storage for Fly Machines. You can access and write to a volume on a Machine just like a regular directory. Use volumes to store your database files, to save your app’s state, such as configuration and session or user data, or for any information that needs to persist after deploy or restart. Read more [here](https://fly.io/docs/reference/volumes/).",
      "name": "Volumes"
    }
  ],
  "externalDocs": {
    "url": "https://fly.io/docs/machines/working-with-machines/"
  }
}